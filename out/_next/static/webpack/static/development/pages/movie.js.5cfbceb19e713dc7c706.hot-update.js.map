{"version":3,"file":"static/webpack/static/development/pages/movie.js.5cfbceb19e713dc7c706.hot-update.js","sources":["webpack:///./pages/movie.js"],"sourcesContent":["import 'isomorphic-fetch'\nimport Link from 'next/link'\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\n// import PodcastList from '../components/PodcastList';\n// import PodcastListWithClick from '../components/PodcastListWithClick';\n// import Error from './_error'\n// import PodcastPlayer from '../components/PodcastPlayer'\n\nexport default class Movie extends React.Component {\n  \n//   constructor(props) {\n//     super(props)\n//     this.state = { openPodcast: null }\n//   }\n\n  static async getInitialProps({ query, res }){\n    try{\n\n      let idMovie = query.id\n      let reqMovie = await fetch(`https://api.themoviedb.org/3/movie/${ idMovie }?api_key=aeb209169cc4a9768d6b47be200b3374&year=2018&language=es`)\n      \n      if(reqMovie.status >= 404) {\n        res.statusCode=reqMovie.status\n        return { movie:null, statusCode:404}\n\n      }\n      \n      let dataMovie = await reqMovie.json()\n      let movie = dataMovie\n      \n      return { movie, statusCode:200 }\n    } catch(e) {\n      res.statusCode=503\n\n      return { movie:null, statusCode:503}\n    }\n      \n    }\n    \n//   openPodcast = (event, podcast) => {\n//     event.preventDefault()\n//     this.setState({\n//       openPodcast: podcast\n//     })\n//   }\n\n//   closePodcast = (event) => {\n//     event.preventDefault()\n//     this.setState({\n//       openPodcast: null\n//     })\n//   }\n    \n    render() {\n      const { movie, statusCode } = this.props\n    //   const { openPodcast } = this.state\n      \n    //   if( statusCode !== 200){\n    //     return <Error statusCode={statusCode} />\n    //   }\n    return <Layout title={movie.title}>\n      <div className=\"banner\" style={{ backgroundImage: `url(https://image.tmdb.org/t/p/w500/${movie.backdrop_path})` }} />\n\n      {/* { openPodcast && \n        <PodcastPlayer clip={ openPodcast } onClose= { this.closePodcast } />\n      } */}\n\n      <h1>{ movie.title }</h1>\n\n      {/* { series.length > 0 &&\n        <div>\n          <h2>Series</h2>\n          <ChannelGrid channels={ series }/>\n        </div>\n      } */}\n\n      <h2>Generos</h2>\n      { movie.genres.map((genre) => (\n        //   <Link href={`/movie?id=${ movie.id }`} prefetch>\n        //   <a key={movie.id} className=\"movie\">\n        //   <img src={`https://image.tmdb.org/t/p/w500/${ movie.poster_path }`} />\n          <span>{genre.name} </span>\n        //   </a>\n        //   </Link>\n        )) }\n        {/* <PodcastList audioClips={audioClips} /> */}\n        {/* <PodcastListWithClick podcasts={audioClips}  onClickPodcast={this.openPodcast}/> */}\n      \n\n      <style jsx>{`\n\n        .banner {\n          width: 100%;\n          padding-bottom: 25%;\n          background-position: 50% 50%;\n          background-size: cover;\n          background-color: #aaa;\n        }\n\n        \n        h1 {\n          font-weight: 600;\n          padding: 15px;\n        }\n        h2 {\n          padding: 5px;\n          font-size: 0.9em;\n          font-weight: 600;\n          margin: 0;\n          text-align: center;\n        }\n\n        \n      `}</style>\n      \n      </Layout>\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAPA;AAAA;AAjBA;AAAA;AAAA;AAAA;AAwDA;;;AA1GA;AACA;AACA;AACA;;;;;;;;;;AAEA;;AAGA;;AACA;AACA;;AADA;AACA;AACA;;;;;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;AAGA;AACA;;AADA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;;;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AA3BA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}